import java.util.ArrayList;
import java.util.List;

public class GameLogic implements PlayableLogic {
    private Disc[][] board;
    private Player player1;
    private Player player2;
    private boolean isFirstPlayerTurn;

    public GameLogic() {
        this.board = new Disc[8][8];
        this.isFirstPlayerTurn = true;
    }

    private boolean checkDirection(int row, int col, int rowAdd, int colAdd, Disc disc) {
        int rowMove = row + rowAdd;
        int colMove = col + colAdd;
        boolean found = false;

        while (isValidPosition(rowMove, colMove)) {
            if (board[rowMove][colMove] == null) {
                return false;
            }
            if (board[rowMove][colMove].getOwner().isPlayerOne() != disc.getOwner().isPlayerOne()) {
                found = true;
            } else {
                return found;
            }
            rowMove += rowAdd;
            colMove += colAdd;
        }
        return false;
    }

 private Position checkPosition(int row, int col, int rowAdd, int colAdd, boolean currentPlayerIsPlayerOne) {
    int rowMove = row + rowAdd;
    int colMove = col + colAdd;
    boolean foundOpponentDisc = false;

    while (isValidPosition(rowMove, colMove)) {
        Disc currentDisc = board[rowMove][colMove];

        if (currentDisc == null) {
            return null;
        }
        if (currentDisc.getOwner().isPlayerOne() != currentPlayerIsPlayerOne) {
            foundOpponentDisc = true;
        } else {
            if (foundOpponentDisc) {
                return new Position(rowMove, colMove);
            } else {
                return null;
            }
        }
        rowMove += rowAdd;
        colMove += colAdd;
    }
    return null;
}


    private boolean isValidPosition(int row, int col) {
        return row >= 0 && col >= 0 && row < board.length && col < board[0].length;
    }

    private void switchTurn() {
        isFirstPlayerTurn = !isFirstPlayerTurn;
    }

    @Override
    public boolean locate_disc(Position a, Disc disc) {
        int row = a.getRow();
        int col = a.getCol();
        if (checkDirection(row, col, 1, 0, disc) ||
                checkDirection(row, col, 1, 1, disc) ||
                checkDirection(row, col, 1, -1, disc) ||
                checkDirection(row, col, 0, 1, disc) ||
                checkDirection(row, col, 0, -1, disc) ||
                checkDirection(row, col, -1, -1, disc) ||
                checkDirection(row, col, -1, 1, disc) ||
                checkDirection(row, col, -1, 0, disc)) {
            board[row][col] = disc;
            switchTurn();
            return true;
        }
        return false;
    }

    @Override
    public Disc getDiscAtPosition(Position position) {
        return board[position.getRow()][position.getCol()];
    }

    @Override
    public int getBoardSize() {
        return board.length;
    }

    @Override
    public List<Position> ValidMoves() {
        List<Position> validMoves = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == null && isValidMoveInAnyDirection(i, j)) {
                    validMoves.add(new Position(i, j));
                }
            }
        }
        return validMoves;
    }

    private boolean isValidMoveInAnyDirection(int row, int col) {
    boolean currentPlayerIsPlayerOne = isFirstPlayerTurn;
    return checkPosition(row, col, 1, 0, currentPlayerIsPlayerOne) != null ||
            checkPosition(row, col, 1, 1, currentPlayerIsPlayerOne) != null ||
            checkPosition(row, col, 1, -1, currentPlayerIsPlayerOne) != null ||
            checkPosition(row, col, 0, 1, currentPlayerIsPlayerOne) != null ||
            checkPosition(row, col, 0, -1, currentPlayerIsPlayerOne) != null ||
            checkPosition(row, col, -1, -1, currentPlayerIsPlayerOne) != null ||
            checkPosition(row, col, -1, 1, currentPlayerIsPlayerOne) != null ||
            checkPosition(row, col, -1, 0, currentPlayerIsPlayerOne) != null;
}


  private void countFlipsInDirection(int row, int col, int rowAdd, int colAdd, List<Position> flippedPositions, boolean currentPlayerIsPlayerOne) {
    int rowMove = row + rowAdd;
    int colMove = col + colAdd;
    List<Position> tempFlips = new ArrayList<>();

    while (isValidPosition(rowMove, colMove)) {
        Disc currentDisc = board[rowMove][colMove];
        Position currentPosition = new Position(rowMove, colMove);

        if (currentDisc == null) {
            return;
        }
        if (currentDisc.getOwner().isPlayerOne() != currentPlayerIsPlayerOne) {
            tempFlips.add(currentPosition);
        } else {
            flippedPositions.addAll(tempFlips);
            return;
        }
        rowMove += rowAdd;
        colMove += colAdd;
    }
}


    @Override
    public int countFlips(Position a) {
         List<Position> flippedPositions = new ArrayList<>();
    int row = a.getRow();
    int col = a.getCol();
    boolean currentPlayerIsPlayerOne = isFirstPlayerTurn;

    countFlipsInDirection(row, col, 1, 0, flippedPositions, currentPlayerIsPlayerOne);
    countFlipsInDirection(row, col, 1, 1, flippedPositions, currentPlayerIsPlayerOne);
    countFlipsInDirection(row, col, 1, -1, flippedPositions, currentPlayerIsPlayerOne);
    countFlipsInDirection(row, col, 0, 1, flippedPositions, currentPlayerIsPlayerOne);
    countFlipsInDirection(row, col, 0, -1, flippedPositions, currentPlayerIsPlayerOne);
    countFlipsInDirection(row, col, -1, 0, flippedPositions, currentPlayerIsPlayerOne);
    countFlipsInDirection(row, col, -1, -1, flippedPositions, currentPlayerIsPlayerOne);
    countFlipsInDirection(row, col, -1, 1, flippedPositions, currentPlayerIsPlayerOne);

    return flippedPositions.size();
}

    @Override
    public Player getFirstPlayer() {
        return player1;
    }

    @Override
    public Player getSecondPlayer() {
        return player2;
    }

    @Override
    public void setPlayers(Player player1, Player player2) {
        this.player1 = player1;
        this.player2 = player2;
    }

    @Override
    public boolean isFirstPlayerTurn() {
        return isFirstPlayerTurn;
    }

    @Override
    public boolean isGameFinished() {
        return false;
    }

    @Override
    public void reset() {
        this.board = new Disc[8][8];
        this.isFirstPlayerTurn = true;
    }

    @Override
    public void undoLastMove() {
    }
}
